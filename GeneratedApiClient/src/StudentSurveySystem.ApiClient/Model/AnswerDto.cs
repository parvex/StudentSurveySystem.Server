/* 
 * Student survey system API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Text;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace StudentSurveySystem.ApiClient.Model
{
    /// <summary>
    /// AnswerDto
    /// </summary>
    [DataContract]
        public partial class AnswerDto :  IEquatable<AnswerDto>
    {
        /// <summary>
        /// Gets or Sets QuestionType
        /// </summary>
        [DataMember(Name="questionType", EmitDefaultValue=false)]
        public QuestionType? QuestionType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AnswerDto" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="value">value.</param>
        /// <param name="questionText">questionText.</param>
        /// <param name="questionType">questionType.</param>
        /// <param name="questionId">questionId.</param>
        public AnswerDto(int? id = default(int?), string value = default(string), string questionText = default(string), QuestionType? questionType = default(QuestionType?), int? questionId = default(int?))
        {
            this.Id = id;
            this.Value = value;
            this.QuestionText = questionText;
            this.QuestionType = questionType;
            this.QuestionId = questionId;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public string Value { get; set; }

        /// <summary>
        /// Gets or Sets QuestionText
        /// </summary>
        [DataMember(Name="questionText", EmitDefaultValue=false)]
        public string QuestionText { get; set; }


        /// <summary>
        /// Gets or Sets QuestionId
        /// </summary>
        [DataMember(Name="questionId", EmitDefaultValue=false)]
        public int? QuestionId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AnswerDto {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  QuestionText: ").Append(QuestionText).Append("\n");
            sb.Append("  QuestionType: ").Append(QuestionType).Append("\n");
            sb.Append("  QuestionId: ").Append(QuestionId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AnswerDto);
        }

        /// <summary>
        /// Returns true if AnswerDto instances are equal
        /// </summary>
        /// <param name="input">Instance of AnswerDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AnswerDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.QuestionText == input.QuestionText ||
                    (this.QuestionText != null &&
                    this.QuestionText.Equals(input.QuestionText))
                ) && 
                (
                    this.QuestionType == input.QuestionType ||
                    (this.QuestionType != null &&
                    this.QuestionType.Equals(input.QuestionType))
                ) && 
                (
                    this.QuestionId == input.QuestionId ||
                    (this.QuestionId != null &&
                    this.QuestionId.Equals(input.QuestionId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                if (this.QuestionText != null)
                    hashCode = hashCode * 59 + this.QuestionText.GetHashCode();
                if (this.QuestionType != null)
                    hashCode = hashCode * 59 + this.QuestionType.GetHashCode();
                if (this.QuestionId != null)
                    hashCode = hashCode * 59 + this.QuestionId.GetHashCode();
                return hashCode;
            }
        }
    }
}
