/* 
 * Student survey system API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = StudentSurveySystem.ApiClient.Client.SwaggerDateConverter;

namespace StudentSurveySystem.ApiClient.Model
{
    /// <summary>
    /// ValidationConfig
    /// </summary>
    [DataContract]
        public partial class ValidationConfig :  IEquatable<ValidationConfig>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ValidationConfig" /> class.
        /// </summary>
        /// <param name="minNumericValue">minNumericValue.</param>
        /// <param name="maxNumericValue">maxNumericValue.</param>
        /// <param name="minDateValue">minDateValue.</param>
        /// <param name="maxDateValue">maxDateValue.</param>
        /// <param name="regex">regex.</param>
        public ValidationConfig(int? minNumericValue = default(int?), int? maxNumericValue = default(int?), DateTime? minDateValue = default(DateTime?), DateTime? maxDateValue = default(DateTime?), string regex = default(string))
        {
            this.MinNumericValue = minNumericValue;
            this.MaxNumericValue = maxNumericValue;
            this.MinDateValue = minDateValue;
            this.MaxDateValue = maxDateValue;
            this.Regex = regex;
        }
        
        /// <summary>
        /// Gets or Sets MinNumericValue
        /// </summary>
        [DataMember(Name="minNumericValue", EmitDefaultValue=false)]
        public int? MinNumericValue { get; set; }

        /// <summary>
        /// Gets or Sets MaxNumericValue
        /// </summary>
        [DataMember(Name="maxNumericValue", EmitDefaultValue=false)]
        public int? MaxNumericValue { get; set; }

        /// <summary>
        /// Gets or Sets MinDateValue
        /// </summary>
        [DataMember(Name="minDateValue", EmitDefaultValue=false)]
        public DateTime? MinDateValue { get; set; }

        /// <summary>
        /// Gets or Sets MaxDateValue
        /// </summary>
        [DataMember(Name="maxDateValue", EmitDefaultValue=false)]
        public DateTime? MaxDateValue { get; set; }

        /// <summary>
        /// Gets or Sets Regex
        /// </summary>
        [DataMember(Name="regex", EmitDefaultValue=false)]
        public string Regex { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ValidationConfig {\n");
            sb.Append("  MinNumericValue: ").Append(MinNumericValue).Append("\n");
            sb.Append("  MaxNumericValue: ").Append(MaxNumericValue).Append("\n");
            sb.Append("  MinDateValue: ").Append(MinDateValue).Append("\n");
            sb.Append("  MaxDateValue: ").Append(MaxDateValue).Append("\n");
            sb.Append("  Regex: ").Append(Regex).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ValidationConfig);
        }

        /// <summary>
        /// Returns true if ValidationConfig instances are equal
        /// </summary>
        /// <param name="input">Instance of ValidationConfig to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ValidationConfig input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MinNumericValue == input.MinNumericValue ||
                    (this.MinNumericValue != null &&
                    this.MinNumericValue.Equals(input.MinNumericValue))
                ) && 
                (
                    this.MaxNumericValue == input.MaxNumericValue ||
                    (this.MaxNumericValue != null &&
                    this.MaxNumericValue.Equals(input.MaxNumericValue))
                ) && 
                (
                    this.MinDateValue == input.MinDateValue ||
                    (this.MinDateValue != null &&
                    this.MinDateValue.Equals(input.MinDateValue))
                ) && 
                (
                    this.MaxDateValue == input.MaxDateValue ||
                    (this.MaxDateValue != null &&
                    this.MaxDateValue.Equals(input.MaxDateValue))
                ) && 
                (
                    this.Regex == input.Regex ||
                    (this.Regex != null &&
                    this.Regex.Equals(input.Regex))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MinNumericValue != null)
                    hashCode = hashCode * 59 + this.MinNumericValue.GetHashCode();
                if (this.MaxNumericValue != null)
                    hashCode = hashCode * 59 + this.MaxNumericValue.GetHashCode();
                if (this.MinDateValue != null)
                    hashCode = hashCode * 59 + this.MinDateValue.GetHashCode();
                if (this.MaxDateValue != null)
                    hashCode = hashCode * 59 + this.MaxDateValue.GetHashCode();
                if (this.Regex != null)
                    hashCode = hashCode * 59 + this.Regex.GetHashCode();
                return hashCode;
            }
        }
    }
}
