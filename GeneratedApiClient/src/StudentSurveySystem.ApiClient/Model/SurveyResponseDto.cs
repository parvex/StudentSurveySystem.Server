/* 
 * Student survey system API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace StudentSurveySystem.ApiClient.Model
{
    /// <summary>
    /// SurveyResponseDto
    /// </summary>
    [DataContract]
        public partial class SurveyResponseDto :  IEquatable<SurveyResponseDto>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SurveyResponseDto" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="respondentId">respondentId.</param>
        /// <param name="answers">answers.</param>
        /// <param name="surveyId">surveyId.</param>
        public SurveyResponseDto(int? id = default(int?), int? respondentId = default(int?), List<AnswerDto> answers = default(List<AnswerDto>), int? surveyId = default(int?))
        {
            this.Id = id;
            this.RespondentId = respondentId;
            this.Answers = answers;
            this.SurveyId = surveyId;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets RespondentId
        /// </summary>
        [DataMember(Name="respondentId", EmitDefaultValue=false)]
        public int? RespondentId { get; set; }

        /// <summary>
        /// Gets or Sets Answers
        /// </summary>
        [DataMember(Name="answers", EmitDefaultValue=false)]
        public List<AnswerDto> Answers { get; set; }

        /// <summary>
        /// Gets or Sets SurveyId
        /// </summary>
        [DataMember(Name="surveyId", EmitDefaultValue=false)]
        public int? SurveyId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SurveyResponseDto {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  RespondentId: ").Append(RespondentId).Append("\n");
            sb.Append("  Answers: ").Append(Answers).Append("\n");
            sb.Append("  SurveyId: ").Append(SurveyId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SurveyResponseDto);
        }

        /// <summary>
        /// Returns true if SurveyResponseDto instances are equal
        /// </summary>
        /// <param name="input">Instance of SurveyResponseDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SurveyResponseDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.RespondentId == input.RespondentId ||
                    (this.RespondentId != null &&
                    this.RespondentId.Equals(input.RespondentId))
                ) && 
                (
                    this.Answers == input.Answers ||
                    this.Answers != null &&
                    input.Answers != null &&
                    this.Answers.SequenceEqual(input.Answers)
                ) && 
                (
                    this.SurveyId == input.SurveyId ||
                    (this.SurveyId != null &&
                    this.SurveyId.Equals(input.SurveyId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.RespondentId != null)
                    hashCode = hashCode * 59 + this.RespondentId.GetHashCode();
                if (this.Answers != null)
                    hashCode = hashCode * 59 + this.Answers.GetHashCode();
                if (this.SurveyId != null)
                    hashCode = hashCode * 59 + this.SurveyId.GetHashCode();
                return hashCode;
            }
        }
    }
}
